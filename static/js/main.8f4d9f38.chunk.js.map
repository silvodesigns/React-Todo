{"version":3,"sources":["components/TodoComponents/TodoForm.js","components/TodoComponents/Todo.js","components/TodoComponents/TodoList.js","App.js","index.js"],"names":["TodoForm","props","react_default","a","createElement","type","id","onClick","adding","erase","Todo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","setState","done","state","class","className","task","React","Component","TodoList","items","todo","map","x","TodoComponents_Todo","key","App","addTodoItem","preventDefault","itemTask","document","getElementById","newEntry","value","Date","now","completed","updatedList","concat","clearCompleted","toSearch","getElementsByClassName","Array","from","forEach","element","parentNode","remove","TodoComponents_TodoForm","TodoComponents_TodoList","render","src_App"],"mappings":"mLAaeA,EAXE,SAAAC,GAEb,OACIC,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,GAAG,SACtBJ,EAAAC,EAAAC,cAAA,UAAQG,QAASN,EAAMO,QAAvB,eACAN,EAAAC,EAAAC,cAAA,UAAQG,QAASN,EAAMQ,OAAvB,qBCmBGC,cAvBb,SAAAA,EAAYT,GAAM,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KAMRiB,YAAc,SAACC,GACbR,EAAKS,SAAS,CACZC,MAAOV,EAAKW,MAAMD,QAPpBV,EAAKW,MAAO,CACVD,MAAM,GAHQV,wEAchB,OACET,EAAAC,EAAAC,cAAA,OAAKmB,MAAM,QACPrB,EAAAC,EAAAC,cAAA,KAAGG,QAASO,KAAKI,YAAaM,UAAWV,KAAKQ,MAAMD,KAAO,YAAc,IAAKP,KAAKb,MAAMwB,KAAKA,cAjBrFC,IAAMC,WCeVC,EAPE,SAAA3B,GACf,IAAI4B,EAAQ5B,EAAM6B,KAClB,OACE5B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUuB,EAAME,IAAI,SAAAC,GAAC,OAAI9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAMR,KAAMO,EAAGE,IAAKF,EAAE1B,SCgD5C6B,qBA7Cb,SAAAA,IAAa,IAAAxB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACXxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,QASFsB,YAAc,SAACjB,GACbA,EAAEkB,iBACF,IAAIC,EAAWC,SAASC,eAAe,QACnCC,EAAW,CAAChB,KAAKa,EAASI,MAAOpC,GAAIqC,KAAKC,MAAOC,WAAU,GAC3DC,EAAcnC,EAAKW,MAAMQ,KAAKiB,OAAON,GACzC9B,EAAKS,SAAS,CAACU,KAAMgB,IACrBR,EAASI,MAAQ,IAhBN/B,EAqBbqC,eAAiB,SAAC7B,GAChBA,EAAEkB,iBACF,IAAIY,EAAWV,SAASW,uBAAuB,aAC/BC,MAAMC,KAAKH,GACjBI,QAAQ,SAASC,GACzBA,EAAQC,WAAWC,YAxBrB7C,EAAKW,MAAO,CACXQ,KAAM,IAHInB,wEAmCX,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,eAActB,EAAAC,EAAAC,cAAA,0BAC7BF,EAAAC,EAAAC,cAACqD,EAAD,CAAUjD,OAAQM,KAAKsB,YAAa3B,MAAOK,KAAKkC,iBAChD9C,EAAAC,EAAAC,cAACsD,EAAD,CAAU5B,KAAMhB,KAAKQ,MAAMQ,eAnDjBJ,IAAMC,kBCAxBgC,iBAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASrB,SAASC,eAAe","file":"static/js/main.8f4d9f38.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoForm = props => {\n\n    return(\n        <form>\n            <input type=\"text\" id=\"item\"/>\n            <button onClick={props.adding}>Add to List</button>\n            <button onClick={props.erase}>Clear Completed</button>  \n        </form>\n    )\n}\n\nexport default TodoForm;","import React from 'react';\n\n\nclass Todo extends React.Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      done: false\n    }\n  }\n\n  handleClick = (e) => {\n    this.setState({\n      done: !this.state.done\n    })\n\n  }\n  render(){\n    return(\n      <div class=\"task\">\n          <p onClick={this.handleClick} className={this.state.done ? \"remove-it\" : \"\"}>{this.props.task.task}</p>\n      </div>\n    );\n  } \n\n}\n\nexport default Todo;\n  ","// your components will all go in this `component` directory.\n// feel free to change this component.js into TodoList.js\n\n\n// <TodoList /> receives your Todos array and iterates over \n// the list generating a new <Todo /> for each element in the array.\n\n\nimport React from 'react';\nimport Todo from  './Todo.js';\n\nconst TodoList = props =>{\n  let items = props.todo;\n  return(\n    <div id=\"canvas\">{items.map(x => <Todo task={x} key={x.id}  />)}</div>\n  );\n};\n\nexport default TodoList;\n  ","import React from 'react';\nimport TodoForm from './components/TodoComponents/TodoForm';\nimport TodoList from './components/TodoComponents/TodoList';\nimport './components/TodoComponents/Todo.css';\n\nclass App extends React.Component {\n// you will need a place to store your state in this component.\n// design `App` to be the parent component of your application.\n// this component is going to take care of state, and any change handlers you need to work with your state\n\n\n// <App /> will hold all the data needed for this project.\n// It will also be the container for your Todo Components.\n// All of your application data will be stored here on <App />.\n// All of your handler functions should live here on <App />.\n\n\n  constructor(){\n    super();\n    this.state ={\n     todo: []\n    };\n  };\n\n  //https://medium.com/pro-react/a-brief-talk-about-immutability-and-react-s-helpers-70919ab8ae7c\n  //article above is a life saver \n\n  addTodoItem = (e) => {\n    e.preventDefault();\n    let itemTask = document.getElementById('item');\n    let newEntry = {task:itemTask.value, id: Date.now(), completed:false};\n    let updatedList = this.state.todo.concat(newEntry);\n    this.setState({todo: updatedList});\n    itemTask.value = \"\";\n\n    \n  }\n \n  clearCompleted = (e) => {\n    e.preventDefault();\n    let toSearch = document.getElementsByClassName(\"remove-it\");\n    let converted = Array.from(toSearch);\n    converted.forEach(function(element) {\n      element.parentNode.remove();\n    });\n    \n\n  \n  }\n\n  render() {\n    \n    return (\n      <div>\n        <div className=\"header-todo\"><h2>TODO MASTER</h2></div>\n        <TodoForm adding={this.addTodoItem} erase={this.clearCompleted}/>\n        <TodoList todo={this.state.todo}  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport 'normalize.css';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}